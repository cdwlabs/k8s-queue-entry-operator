# Example database table queue schema:
#
# mysql> show create table queue_test;
# +------------+---------------------------------+
# | Table      | Create Table                    |
# +------------+---------------------------------+
# | queue_test | CREATE TABLE `queue_test` (
#   `id` int(11) NOT NULL,
#   `complete` tinyint(1) DEFAULT '0',
#   PRIMARY KEY (`id`)
# ) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
# +------------+---------------------------------+
# 1 row in set (0.00 sec)

# Example dbqueue definition that creates one k8s job per queue entry:
---
apiVersion: "queueentryoperator.evanzeimet.com/betav1"
kind: DbQueue
metadata:
  name: db-queue-entry-test
  namespace: queo
spec:
  dbDriver: mysql
  dbDsnSecretKeyRef:
    key: "db.dev.dsn"
    name: queo
  entriesSql: "select id from queue_test where complete = false"
  pollIntervalSeconds: 30
  scope: dev
  suspend: false
  jobConfig:
    entryKeyEnvVarName: QUEUE_TEST_ENTRY_KEY
    parallelism: 5
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: queue-entry-executor
              image: alpine
              command:
              - echo
              - "do-something-with"
              - "$(QUEUE_TEST_ENTRY_KEY)"
              - "and-mark-it-complete-in-the-db"

# Example dbqueue definition that creates one k8s job for all queue entries
---
apiVersion: "queueentryoperator.evanzeimet.com/betav1"
kind: DbQueue
metadata:
  name: db-queue-entries-test
  namespace: queo
spec:
  dbDriver: mysql
  dbDsnSecretKeyRef:
    key: "db.dev.dsn"
    name: queo
  entriesSql: "select id from queue_test where complete = false limit 1"
  pollIntervalSeconds: 30
  scope: dev
  suspend: false
  jobConfig:
    entryKeyEnvVarName: omit
    parallelism: 1
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - name: queue-entries-executor
              image: alpine
              command:
              - echo
              - "do-something-with-a-non-zero-entry-count-and-mark-them-complete-in-the-db"
