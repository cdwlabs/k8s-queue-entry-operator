/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package betav1

import (
	betav1 "github.com/podnov/k8s-queue-entry-operator/pkg/apis/queueentryoperator/betav1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DbQueueLister helps list DbQueues.
type DbQueueLister interface {
	// List lists all DbQueues in the indexer.
	List(selector labels.Selector) (ret []*betav1.DbQueue, err error)
	// DbQueues returns an object that can list and get DbQueues.
	DbQueues(namespace string) DbQueueNamespaceLister
	DbQueueListerExpansion
}

// dbQueueLister implements the DbQueueLister interface.
type dbQueueLister struct {
	indexer cache.Indexer
}

// NewDbQueueLister returns a new DbQueueLister.
func NewDbQueueLister(indexer cache.Indexer) DbQueueLister {
	return &dbQueueLister{indexer: indexer}
}

// List lists all DbQueues in the indexer.
func (s *dbQueueLister) List(selector labels.Selector) (ret []*betav1.DbQueue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*betav1.DbQueue))
	})
	return ret, err
}

// DbQueues returns an object that can list and get DbQueues.
func (s *dbQueueLister) DbQueues(namespace string) DbQueueNamespaceLister {
	return dbQueueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DbQueueNamespaceLister helps list and get DbQueues.
type DbQueueNamespaceLister interface {
	// List lists all DbQueues in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*betav1.DbQueue, err error)
	// Get retrieves the DbQueue from the indexer for a given namespace and name.
	Get(name string) (*betav1.DbQueue, error)
	DbQueueNamespaceListerExpansion
}

// dbQueueNamespaceLister implements the DbQueueNamespaceLister
// interface.
type dbQueueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DbQueues in the indexer for a given namespace.
func (s dbQueueNamespaceLister) List(selector labels.Selector) (ret []*betav1.DbQueue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*betav1.DbQueue))
	})
	return ret, err
}

// Get retrieves the DbQueue from the indexer for a given namespace and name.
func (s dbQueueNamespaceLister) Get(name string) (*betav1.DbQueue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(betav1.Resource("dbqueue"), name)
	}
	return obj.(*betav1.DbQueue), nil
}
